import random

import telebot

sys_random = random.SystemRandom()

from telebot import *
from config import *
import dbUtils
import problemBuilding

bot = telebot.TeleBot(token)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
main.row("üé≤–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞üé≤", "üéì–ë—É–¥—É –±–æ—Ç–∞—Ç—åüéì")
main.row("üé≠–ë—É–¥—É —á–∏—Ç–∞—Ç—å –º–µ–º–µ—Å—ãüé≠")
main.row("üìï–ö–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?üìï")

# –ï–ì–≠ –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menuEge = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
menuEge.row('–í–∞—Ä–∏–∞–Ω—Ç', 'II —á–∞—Å—Ç—å', '–õ–∞—Ä–∏–Ω')
menuEge.row(toBegin)

# –ë—É–¥—É –±–æ—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
typeOfBotka = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
typeOfBotka.row('–î–í–ò', '–ï–ì–≠')
typeOfBotka.row(toBegin)

# II —á–∞—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
secondPart = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
secondPart.row('13', '14', '15', '16', '17', '18', '19')
secondPart.row(toBegin)

# –î–í–ò –≥–æ–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
dviYears = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
dviYears.row('2017', '2016', '2015', '2014')
dviYears.row('2013', '2012', '2011', '2010')
dviYears.row('2009', '2008', '2007', '2006')
dviYears.row(toBegin)


def logFromMsg(msg):
    log.info('{} ({}): {}'.format(msg.chat.id, msg.chat.username, msg.text))


def whatTheFuckMan(msg):
    bot.send_message(msg.chat.id, text=sys_random.choice(whatTheFuckMessage))


def sendProblemToUser(msg, egeNumber=None, year=None, variant=None, problemID=None):
    try:
        if egeNumber:
            problemID, path, problemKeyboard, tags = problemBuilding.getEgeProblem(
                dbUtils.getEgeProblem(msg, egeNumber=egeNumber))
            dbUtils.addUserProblemHistory(msg.chat.id, problemID)
        elif problemID:
            _, path, problemKeyboard, tags = problemBuilding.getEgeProblem(
                dbUtils.getEgeProblem(msg, problemID=problemID))
        else:
            path, problemKeyboard, tags = problemBuilding.getDviProblem(year, variant)

        photo = open(path, 'rb')
        bot.send_photo(msg.chat.id, photo=photo, reply_markup=problemKeyboard, caption=tags)
        photo.close()

    except(Exception):
        pass


def sendLarinVariant(msg, variantNumber):
    try:
        with open(bankPath + larinPathPattern.replace('*', str(variantNumber)), 'rb') as larinFile:
            bot.send_document(msg.chat.id, data=larinFile)
    except(Exception):
        bot.send_message(msg.chat.id, text="–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–∏—Å–∫–æ–º —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ê –æ–Ω —Ç–æ—á–Ω–æ –µ—Å—Ç—å?")


def showDVIVariants(msg, year):
    variants = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    variants.keyboard = [[dict(text=str(i) + ' ({})'.format(year)) for i in range(1, 5)]]
    variants.row(toBegin)

    bot.send_message(msg.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=variants)


@bot.message_handler(commands=['start'])
def handle_start_help(message):
    logFromMsg(message)
    dbUtils.addUser(message)
    bot.send_message(message.chat.id,
                     parse_mode="HTML",
                     text="<b>NLog(N) Turing BOT</b>", reply_markup=main)
    bot.send_message(message.chat.id, parse_mode="HTML", text="<i>v1.3.3 (beta)</i>")
    bot.send_message(message.chat.id, parse_mode="HTML", text=helloMessage)

    mainlinks = types.InlineKeyboardMarkup(row_width=3)
    gitBookBtn = types.InlineKeyboardButton(text="GitBook",
                                            url="https://timyrik20.gitbooks.io/nlogn/")
    siteBtn = types.InlineKeyboardButton(text="Telegram-—á–∞—Ç",
                                         url="https://t.me/joinchat/EvGqu0MpwttTiIWBl-rx7w")
    telegramChannelBtn = types.InlineKeyboardButton(text="Telegram-–∫–∞–Ω–∞–ª",
                                                    url="https://t.me/nlognege")

    mainlinks.add(gitBookBtn, siteBtn, telegramChannelBtn)
    bot.send_message(message.chat.id,
                     text="Timur Guev @timyrik20\n"
                          "George Gabolaev @gabolaev\n"
                          "Nelli Khlustova @nelli_snow", reply_markup=mainlinks)

    vkGroupsLinks = types.InlineKeyboardMarkup()
    egeBtn = types.InlineKeyboardButton(text="üìì –ï–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞.", url="https://vk.com/nlognege")
    olympBtn = types.InlineKeyboardButton(text="üèÜ –û–ª–∏–º–ø. –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", url="https://vk.com/nlognolymp")
    csBtn = types.InlineKeyboardButton(text="üíª –ö–æ–º–ø. –Ω–∞—É–∫–∏", url="https://vk.com/nlogncs")

    vkGroupsLinks.add(egeBtn, olympBtn, csBtn)
    bot.send_message(message.chat.id,
                     text=aboutVkMessage, reply_markup=vkGroupsLinks)


@bot.message_handler(regexp=dvi)
def wantDVIProblem(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥.", reply_markup=dviYears)


@bot.message_handler(regexp=issue)
def issue(msg):
    logFromMsg(msg)
    dbUtils.addIssue(msg.chat.id, msg.text)
    bot.send_message(msg.chat.id, text="–°–ø–∞—Å–∏–±–æ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º.")
    bot.send_message(adminsGroup, text=aboutIssue.format(msg.chat.id, msg.chat.username, msg.text))


@bot.message_handler(regexp=thanks)
def parseLarinVariant(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id,
                     text='–ï—Å–ª–∏ —è –Ω–µ –æ—à–∏–±—Å—è, —Ç—ã —Ö–≤–∞–ª–∏—à—å –º–µ–Ω—è) –°–ø–∞—Å–∏–±–æ, {}! –° —Ç–æ–±–æ–π –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.'.format(
                         msg.chat.username))


@bot.message_handler(regexp=tellMe)
def whoami(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text="–ù–∞–≤–µ—Ä–Ω–æ, —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –º–µ–Ω—è. –¢–∞–∫ –≤–æ—Ç...")
    bot.send_message(msg.chat.id, text=helloMessage)
    bot.send_message(msg.chat.id, text="–ê –µ—â—ë –≤ –º–æ–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤–æ—Ç —ç—Ç–æ.")
    bot.send_message(msg.chat.id, text=description)


@bot.message_handler(regexp=hello)
def sayHello(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text='–í—Ä–æ–¥–µ –∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±–µ) –ü—Ä–∏–≤–µ—Ç!')


@bot.message_handler(regexp=working)
def showTypesOfBotka(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text='–í—ã–±–µ—Ä–∏ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞.', reply_markup=typeOfBotka)


@bot.message_handler(regexp=documentation)
def documentation(msg):
    logFromMsg(msg)
    with open(docPath, 'rb') as doc:
        bot.send_document(msg.chat.id, data=doc, caption='–ö—Ä–∞—Å–∏–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.')


@bot.message_handler(regexp=ege)
def wantEgeProblem(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text="–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å –ï–ì–≠?", reply_markup=menuEge)


@bot.message_handler(regexp=random)
def wantProblem(msg):
    logFromMsg(msg)
    egeNumber = dbUtils.getRandomEgeNumber()
    sendProblemToUser(msg, egeNumber=egeNumber)


@bot.message_handler(regexp=part2)
def partC(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text='–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.', reply_markup=secondPart)


@bot.message_handler(regexp=back)
def beginning(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è', reply_markup=main)


@bot.message_handler(regexp=recourse)
def beginning(msg):
    logFromMsg(msg)
    bot.send_message(msg.chat.id, text='–ß—Ç–æ?', reply_markup=main)


@bot.message_handler(regexp=mem)
def mem(msg):
    try:
        mem = dbUtils.getMem()
        bot.send_message(msg.chat.id, text=mem)
        logFromMsg(msg)
    except(telebot.apihelper.ApiException):
        bot.send_message(msg.chat.id, text='–ü–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {}. –Ø –Ω–µ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—é.'.format(msg.chat.username))


@bot.message_handler(regexp=variant)
def randomVariant(msg):
    logFromMsg(msg)
    for i in range(13, 20):
        sendProblemToUser(msg, egeNumber=i)


@bot.message_handler(regexp=var)
def parseLarinVariant(msg):
    logFromMsg(msg)
    sendLarinVariant(msg, msg.text[4::])


@bot.message_handler(regexp=larin)
def larin(msg):
    logFromMsg(msg)
    keyboard = problemBuilding.getLarinVariantsKeyboard()
    bot.send_message(msg.chat.id, text='–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç.', reply_markup=keyboard)


@bot.message_handler(regexp='get')
def getParse(msg):
    logFromMsg(msg)
    try:
        sendProblemToUser(msg, problemID=int(msg.text[4::]))
    except:
        whatTheFuckMan(msg)


@bot.message_handler(regexp='–¥–∞–π')
def getAlias(msg):
    getParse(msg)


@bot.callback_query_handler(func=lambda call: True)
def callback_message(call):
    logger.info(call)
    with open(call.data, "rb") as file:
        if call.data[17] == 'E':
            bot.send_photo(call.message.chat.id, photo=file)
        else:
            bot.send_document(call.message.chat.id, data=file)


@bot.message_handler(content_types=["text"])
def parseText(msg):
    logFromMsg(msg)
    try:

        intValue = int(msg.text)
        if minEgeProblemNumber <= intValue <= maxEgeProblemNumber:  # –ü—Ä–∏—à–µ–ª –Ω–æ–º–µ—Ä –ï–ì–≠
            sendProblemToUser(msg, egeNumber=intValue)
        elif minDVIYear <= intValue <= maxDVIYear:  # –ü—Ä–∏—à–µ–ª –≥–æ–¥ –î–í–ò
            showDVIVariants(msg, intValue)
        else:
            whatTheFuckMan(msg)
    except Exception:
        try:
            sendProblemToUser(msg, year=int(msg.text[3:7]), variant=int(msg.text[0]))  # –ì–û–î –î–í–ò
        except Exception:
            whatTheFuckMan(msg)


if __name__ == '__main__':
    try:
        log.debug(botEnabling)
        bot.polling(none_stop=True)
        log.debug(botDisabling)
    except(Exception) as ex:
        log.error(ex)
